代码见Threading文件夹
/*----------------------------------python多线程-----------------------------------*/
Python线程是真正的Posix thread，而不是模拟的线程。

python 标准库提供了两个模块：_thread和threading，前者是低级模块，后者是高级模块，对前者进行了封装。

#  --* 启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：
1.py

# 解释:
任何进程默认会启动一个主线程(MainThread)，主线程可以启动新的线程。
threading模块的current_thread()永远返回当前线程实例。


# --* Lock
多进程和多线程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，
而多线程中，所有变量都由线程共享，所以任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据存在危险！！！

# 下例，多线程将变量内容改乱了
2.py

# 解释：
我们定义了一个全局变量balance，初值为0，并启动两个线程，先存后取，理论上结果应为0，
但是由于线程调度有操作系统决定，t1、t2交替执行，当循环次数足够多，balance结果就不一定为0了。
两个线程同时一存一取，就可能导致余额不对，所以，我们必须确定一个线程在修改balance时，别的线程一定不能改。

# 为此，我们要给change_it()上一把锁，当某个线程开始执行change_it()时，我们说，该线程因为获得了锁，因此其他线程不能同时执行change_it()，只能等待，
直到锁被释放，获得该锁后才能执行。
通过threading.Lock()来实现：
3.py

# 解释：
获得锁的线程用完以后一定要释放锁，否则其他苦苦等锁的线程将永远等待下去，成为死线程，所有我们使用try...finally来确保锁一定被释放。


# 锁的坏处：阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率大大降低；
其次，由于可以存在多个锁，不同线程持有不同锁，并试图获取其他锁，就可能造成死锁!!!


# --* 多核CPU
import threading, multiprocessing

def loop():
    x = 0
    while True:
        x = x ^ 1
 

for i in range(multiprocessing.cpu_count()):
    t = threading.Thread(target=loop)
    t.start()


# 通过任务管理器发现，cpu占有率达不到 100%，只有不到25%
因为Python解释器执行代码的时候有一个GIL锁，Global Interpreter Lock，这实际上给线程上了锁，即便是100个线程跑在有100核CPU的机器上，也只能用到1核。。。

也就是说，CPython中多线程无法利用多核，多线程并发只是一个美丽的梦。。。


# --* ThreadLocal，解决参数在一个线程中各个函数之间相互传递问题。
import threading

# 创建全局ThreadLocal对象：
local_school = threading.local()

def process_student():
    # 获取当前线程关联的student：
    std = local_school.student
    print('Hello, %s (in %s)' % (std, threading.current_thread().name))


def process_thread(name):
    # 绑定ThreadLocal的student
    local_school.student = name
    process_student()



t1 = threading.Thread(target=process_thread, args=('Alice',), name='Thread-A'))
t2 = threading.Thread(target=process_thread, args=('Bob',), name='Thread-B'))
t1.start()
t2.start()
t1.join()
t2.join()

# 解释：
可以把local_school看成全局变量，但其每个属性比如local_school.student都是线程的局部变量，可以任意读写互不干扰，也不用管理锁的问题。


# --* Start work with threads in python
helloPythonWithThread.py


# --* How to use a thread in subclass
myThread.py

# --* Lock
useLock.py

# --* Semaphore
useSemaphore.py

# --* RLock
userRLock.py

# --* Condition
useCondition.py

# --* Event
useEvent.py

# --* Queue
useQueue.py

# --* with statement
withStatement.py